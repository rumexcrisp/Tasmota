; PlatformIO Project Configuration File
;
;   Build options: build flags, source filter
;   Upload options: custom upload port, speed and extra flags
;   Library options: dependencies, extra library storages
;   Advanced options: extra scripting
;
; Please visit documentation for the other options and examples
; https://docs.platformio.org/page/projectconf.html

[platformio]
description = Provide ESP8266 / ESP32 based devices with Web, MQTT and OTA firmware
src_dir = tasmota
lib_dir = lib/default
boards_dir = boards
build_cache_dir = .cache
extra_configs = platformio_tasmota32.ini
	platformio_tasmota_env.ini
	platformio_tasmota_env32.ini
	platformio_override.ini
	platformio_tasmota_cenv.ini
default_envs = 
	tasmota32

[common]
platform = ${core.platform}
platform_packages = ${core.platform_packages}
framework = arduino
board = esp8266_1M
board_build.filesystem = littlefs
custom_unpack_dir = unpacked_littlefs
build_unflags = ${core.build_unflags}
build_flags = ${core.build_flags}
monitor_speed = 115200
monitor_port = COM5
upload_resetmethod = nodemcu
upload_port = COM5
extra_scripts = ${esp_defaults.extra_scripts}
lib_ldf_mode = chain
lib_compat_mode = strict
shared_libdeps_dir = lib
lib_extra_dirs = 
	lib/lib_basic
	lib/lib_i2c
	lib/lib_display
	lib/lib_ssl
	lib/lib_audio
	lib/lib_rf
	lib/lib_div

[tasmota]

[scripts_defaults]
extra_scripts = pre:pio-tools/pre_source_dir.py
	pio-tools/strip-floats.py
	pio-tools/name-firmware.py
	pio-tools/gzip-firmware.py
	pio-tools/override_copy.py
	pio-tools/download_fs.py

[esp_defaults]
extra_scripts = ${scripts_defaults.extra_scripts}
build_unflags = -Wall
	-Wdeprecated-declarations
build_flags = -DCORE_DEBUG_LEVEL=0
	-Wl,-Map,firmware.map
	-Wno-deprecated-declarations
	-mtarget-align
	-free
	-fipa-pta
	-Wreturn-type
	-DTASMOTA
	-DUSE_CONFIG_OVERRIDE

[esp82xx_defaults]
build_flags = ${esp_defaults.build_flags}
	-DNDEBUG
	-DFP_IN_IROM
	-DBEARSSL_SSL_BASIC
	-DPIO_FRAMEWORK_ARDUINO_ESPRESSIF_SDK22x_190703
	-DPIO_FRAMEWORK_ARDUINO_LWIP2_HIGHER_BANDWIDTH_LOW_FLASH
	-DVTABLES_IN_FLASH
	-DPSTR_ALIGN=1
	-DMIMETYPE_MINIMAL

[core]
platform = https://github.com/tasmota/platform-espressif8266/releases/download/v2.7.4.9/platform-espressif8266-2.7.4.9.zip
platform_packages = 
build_unflags = ${esp_defaults.build_unflags}
build_flags = ${esp82xx_defaults.build_flags}
	-DWAVEFORM_LOCKED_PWM

[esp32_defaults]
build_unflags = ${esp_defaults.build_unflags}
	-Wswitch-unreachable
	-Wstringop-overflow
	-Wincompatible-pointer-types
	-Wnonnull-compare
	-fexceptions
	-fno-lto
	-Wpointer-arith
build_flags = ${esp_defaults.build_flags}
	-Wno-switch-unreachable
	-Wno-stringop-overflow
	-fno-exceptions
	-flto
	-DBUFFER_LENGTH=128
	-DHTTP_UPLOAD_BUFLEN=2048
	-DMQTT_MAX_PACKET_SIZE=1200
	-Duint32=uint32_t
	-Duint16=uint16_t
	-Duint8=uint8_t
	-Dsint8_t=int8_t
	-Dsint32_t=int32_t
	-Dsint16_t=int16_t
	-Dmemcpy_P=memcpy
	-Dmemcmp_P=memcmp
	-DUSE_4K_RSA
	-I$PROJECT_DIR/include
	-include "sdkconfig.h"
	-include "esp32x_fixes.h"
	-Wl,--wrap=panicHandler -Wl,--wrap=xt_unhandled_exception
	-Wl,--wrap=_Z11analogWritehi
	-Wl,--wrap=ledcReadFreq
extra_scripts = pre:pio-tools/add_c_flags.py
	pio-tools/gen-berry-structures.py
	post:pio-tools/post_esp32.py
	${esp_defaults.extra_scripts}

[core32]
platform = https://github.com/tasmota/platform-espressif32/releases/download/v2.0.5.1/platform-espressif32-2.0.5.1.zip
platform_packages = 
build_unflags = ${esp32_defaults.build_unflags}
build_flags = ${esp32_defaults.build_flags}

[env]
platform = ${common.platform}
platform_packages = ${common.platform_packages}
framework = ${common.framework}
board = ${common.board}
board_build.filesystem = ${common.board_build.filesystem}
build_unflags = ${common.build_unflags}
build_flags = ${common.build_flags}
monitor_speed = ${common.monitor_speed}
upload_port = ${common.upload_port}
upload_resetmethod = ${common.upload_resetmethod}
extra_scripts = ${esp_defaults.extra_scripts}
lib_ldf_mode = ${common.lib_ldf_mode}
lib_compat_mode = ${common.lib_compat_mode}
lib_extra_dirs = ${library.lib_extra_dirs}
lib_ignore = 
	Servo(esp8266)
	ESP8266AVRISP
	ESP8266LLMNR
	ESP8266NetBIOS
	ESP8266SSDP
	SP8266WiFiMesh
	Ethernet(esp8266)
	GDBStub
	TFT_Touch_Shield_V2
	ESP8266HTTPUpdateServer
	ESP8266WiFiMesh
	EspSoftwareSerial
	SPISlave
	Hash
	ArduinoOTA

[env:tasmota]

[env:tasmota4M]
board = esp8266_4M2M

[env:tasmota-minimal]
build_flags = ${env.build_flags} -DFIRMWARE_MINIMAL
lib_extra_dirs = 

[env:tasmota-lite]
build_flags = ${env.build_flags} -DFIRMWARE_LITE
lib_extra_dirs = 

[env:tasmota-knx]
build_flags = ${env.build_flags} -DFIRMWARE_KNX_NO_EMULATION
lib_extra_dirs = lib/lib_basic, lib/lib_div

[env:tasmota-sensors]
build_flags = ${env.build_flags} -DFIRMWARE_SENSORS
lib_extra_dirs = lib/lib_basic, lib/lib_i2c, lib/lib_rf, lib/lib_div

[env:tasmota-display]
build_flags = ${env.build_flags} -DFIRMWARE_DISPLAYS
lib_extra_dirs = lib/lib_basic, lib/lib_display

[env:tasmota-ir]
build_flags = ${env.build_flags} -DFIRMWARE_IR
lib_extra_dirs = lib/lib_basic

[env:tasmota-zbbridge]
build_flags = ${env.build_flags} -DFIRMWARE_ZBBRIDGE
board = esp8266_zbbridge
lib_extra_dirs = lib/lib_basic, lib/lib_ssl, lib/lib_div

[env:tasmota-zigbee]
build_flags = ${env.build_flags} -DUSE_ZIGBEE -DUSE_CCLOADER -DUSE_UFILESYS
board = esp8266_4M2M
board_build.f_cpu = 160000000L

[env:tasmota-AD]
build_flags = ${env.build_flags} -DMY_LANGUAGE=ca_AD

[env:tasmota-AF]
build_flags = ${env.build_flags} -DMY_LANGUAGE=af_AF

[env:tasmota-BG]
build_flags = ${env.build_flags} -DMY_LANGUAGE=bg_BG

[env:tasmota-BR]
build_flags = ${env.build_flags} -DMY_LANGUAGE=pt_BR

[env:tasmota-CN]
build_flags = ${env.build_flags} -DMY_LANGUAGE=zh_CN

[env:tasmota-CZ]
build_flags = ${env.build_flags} -DMY_LANGUAGE=cs_CZ

[env:tasmota-DE]
build_flags = ${env.build_flags} -DMY_LANGUAGE=de_DE

[env:tasmota-ES]
build_flags = ${env.build_flags} -DMY_LANGUAGE=es_ES

[env:tasmota-FR]
build_flags = ${env.build_flags} -DMY_LANGUAGE=fr_FR

[env:tasmota-FY]
build_flags = ${env.build_flags} -DMY_LANGUAGE=fy_NL

[env:tasmota-GR]
build_flags = ${env.build_flags} -DMY_LANGUAGE=el_GR

[env:tasmota-HE]
build_flags = ${env.build_flags} -DMY_LANGUAGE=he_HE

[env:tasmota-HU]
build_flags = ${env.build_flags} -DMY_LANGUAGE=hu_HU

[env:tasmota-IT]
build_flags = ${env.build_flags} -DMY_LANGUAGE=it_IT

[env:tasmota-KO]
build_flags = ${env.build_flags} -DMY_LANGUAGE=ko_KO

[env:tasmota-NL]
build_flags = ${env.build_flags} -DMY_LANGUAGE=nl_NL

[env:tasmota-PL]
build_flags = ${env.build_flags} -DMY_LANGUAGE=pl_PL

[env:tasmota-PT]
build_flags = ${env.build_flags} -DMY_LANGUAGE=pt_PT

[env:tasmota-RO]
build_flags = ${env.build_flags} -DMY_LANGUAGE=ro_RO

[env:tasmota-RU]
build_flags = ${env.build_flags} -DMY_LANGUAGE=ru_RU

[env:tasmota-SE]
build_flags = ${env.build_flags} -DMY_LANGUAGE=sv_SE

[env:tasmota-SK]
build_flags = ${env.build_flags} -DMY_LANGUAGE=sk_SK

[env:tasmota-TR]
build_flags = ${env.build_flags} -DMY_LANGUAGE=tr_TR

[env:tasmota-TW]
build_flags = ${env.build_flags} -DMY_LANGUAGE=zh_TW

[env:tasmota-UK]
build_flags = ${env.build_flags} -DMY_LANGUAGE=uk_UA

[env:tasmota-VN]
build_flags = ${env.build_flags} -DMY_LANGUAGE=vi_VN

[env:tasmota32_base]
framework = ${common.framework}
platform = ${core32.platform}
platform_packages = ${core32.platform_packages}
board_build.filesystem = ${common.board_build.filesystem}
custom_unpack_dir = ${common.custom_unpack_dir}
board = esp32_4M
monitor_speed = 115200
upload_port = /dev/ttyUSB0
upload_resetmethod = ${common.upload_resetmethod}
extra_scripts = ${esp32_defaults.extra_scripts}
build_unflags = ${esp32_defaults.build_unflags}
build_flags = ${esp32_defaults.build_flags}
lib_ldf_mode = ${common.lib_ldf_mode}
lib_compat_mode = ${common.lib_compat_mode}
lib_extra_dirs = ${library.lib_extra_dirs}
	lib/libesp32
	lib/libesp32_lvgl
lib_ignore = 
	HTTPUpdateServer
	ESP RainMaker
	WiFiProv
	USB
	SPIFFS
	ESP32 Azure IoT Arduino
	ESP32 Async UDP
	ESP32 BLE Arduino
	NetBIOS
	ESP32
	Preferences
	BluetoothSerial
	ArduinoOTA
custom_files_upload = no_files

[env:tasmota32-safeboot]
extends = env:tasmota32_base
build_flags = ${env:tasmota32_base.build_flags} -DFIRMWARE_SAFEBOOT
lib_extra_dirs = lib/lib_ssl, lib/libesp32
lib_ignore = 
	Micro-RTSP
	ESP Mail Client
	DHT sensor library

[env:tasmota32]
extends = env:tasmota32_base
build_flags = ${env:tasmota32_base.build_flags} -DFIRMWARE_TASMOTA32

[env:tasmota32_8M]
extends = env:tasmota32_base
board = esp32_8M
build_flags = ${env:tasmota32_base.build_flags} -DFIRMWARE_TASMOTA32

[env:tasmota32_16M]
extends = env:tasmota32_base
board = esp32_16M
build_flags = ${env:tasmota32_base.build_flags} -DFIRMWARE_TASMOTA32

[env:tasmota32-webcam]
extends = env:tasmota32_base
board = esp32-cam
build_flags = ${env:tasmota32_base.build_flags} -DFIRMWARE_WEBCAM
lib_extra_dirs = lib/lib_ssl, lib/libesp32

[env:tasmota32-odroidgo]
extends = env:tasmota32-lvgl
board = esp32-odroid

[env:tasmota32-core2]
extends = env:tasmota32-lvgl
board = esp32-m5core2
build_flags = ${env:tasmota32-lvgl.build_flags} -DUSE_I2S_SAY_TIME -DUSE_I2S_WEBRADIO -DUSE_SENDMAIL
lib_extra_dirs = lib/libesp32, lib/libesp32_lvgl, lib/lib_basic, lib/lib_i2c, lib/lib_rf, lib/lib_div, lib/lib_ssl, lib/lib_display, lib/lib_audio

[env:tasmota32-bluetooth]
extends = env:tasmota32_base
build_flags = ${env:tasmota32_base.build_flags} -DFIRMWARE_BLUETOOTH
lib_extra_dirs = lib/libesp32, lib/libesp32_div, lib/lib_basic, lib/lib_i2c, lib/lib_ssl

[env:tasmota32-display]
extends = env:tasmota32_base
build_flags = ${env:tasmota32_base.build_flags} -DFIRMWARE_DISPLAYS
lib_extra_dirs = lib/libesp32, lib/lib_basic, lib/lib_display, lib/lib_ssl

[env:tasmota32-lvgl]
extends = env:tasmota32_base
build_flags = ${env:tasmota32_base.build_flags} -DFIRMWARE_LVGL
board_build.f_cpu = 160000000L
lib_extra_dirs = lib/libesp32, lib/libesp32_lvgl, lib/lib_basic, lib/lib_i2c, lib/lib_rf, lib/lib_div, lib/lib_ssl, lib/lib_display

[env:tasmota32-ir]
extends = env:tasmota32_base
build_flags = ${env:tasmota32_base.build_flags} -DUSE_IR_REMOTE_FULL -DFIRMWARE_IR
lib_extra_dirs = lib/libesp32, lib/lib_basic, lib/lib_ssl

[env:tasmota32solo1]
extends = env:tasmota32_base
board = esp32_solo1_4M

[env:tasmota32solo1-safeboot]
extends = env:tasmota32_base
board = esp32_solo1_4M
build_flags = ${env:tasmota32_base.build_flags} -DFIRMWARE_SAFEBOOT
lib_extra_dirs = lib/lib_ssl, lib/libesp32
lib_ignore = 
	Micro-RTSP
	ESP Mail Client
	DHT sensor library

[env:tasmota32-zbbrdgpro]
extends = env:tasmota32_base
board = esp32_4M_FS
build_flags = ${env:tasmota32_base.build_flags}
	-DFIRMWARE_ZBBRDGPRO
	-DFRAMEWORK_ARDUINO_ITEAD
custom_files_upload = ${env:tasmota32_base.custom_files_upload}
	tools/fw_SonoffZigbeeBridgePro_cc2652/Sonoff_ZBPro.autoconf
	tasmota/berry/zigbee/cc2652_flasher.be
	tasmota/berry/zigbee/intelhex.be
	tasmota/berry/zigbee/sonoff_zb_pro_flasher.be
	tools/fw_SonoffZigbeeBridgePro_cc2652/SonoffZBPro_coord_20220219.hex
lib_extra_dirs = lib/lib_basic, lib/lib_ssl, lib/libesp32

[env:tasmota32-nspanel]
extends = env:tasmota32_base
build_flags = ${env:tasmota32_base.build_flags}
	-DFIRMWARE_NSPANEL
	-DFRAMEWORK_ARDUINO_ITEAD

[env:tasmota32c3-safeboot]
extends = env:tasmota32_base
board = esp32c3
build_unflags = ${env:tasmota32_base.build_unflags}
	-flto
	-mtarget-align
build_flags = ${env:tasmota32_base.build_flags} -DFIRMWARE_SAFEBOOT
	-fno-lto
lib_extra_dirs = lib/lib_ssl, lib/libesp32
lib_ignore = 
	Micro-RTSP
	ESP Mail Client
	DHT sensor library

[env:tasmota32c3]
extends = env:tasmota32_base
board = esp32c3
build_unflags = ${env:tasmota32_base.build_unflags}
	-flto
	-mtarget-align
build_flags = ${env:tasmota32_base.build_flags} -DFIRMWARE_TASMOTA32
	-fno-lto
lib_ignore = 
	TTGO TWatch Library
	Micro-RTSP
	epdiy
	mp3_shine_esp32

[env:tasmota32c3cdc-safeboot]
extends = env:tasmota32c3-safeboot
board = esp32c3cdc

[env:tasmota32c3cdc]
extends = env:tasmota32c3
board = esp32c3cdc

[env:tasmota32s2-safeboot]
extends = env:tasmota32_base
board = esp32s2
build_flags = ${env:tasmota32_base.build_flags} -DFIRMWARE_SAFEBOOT
lib_extra_dirs = lib/lib_ssl, lib/libesp32
lib_ignore = 
	Micro-RTSP
	ESP Mail Client
	DHT sensor library

[env:tasmota32s2]
extends = env:tasmota32_base
board = esp32s2
build_flags = ${env:tasmota32_base.build_flags} -DFIRMWARE_TASMOTA32
lib_ignore = 
	TTGO TWatch Library
	NimBLE-Arduino
	Micro-RTSP
	epdiy
lib_deps = h2zero/NimBLE-Arduino@^1.4.0

[env:tasmota32s2cdc-safeboot]
extends = env:tasmota32s2-safeboot
board = esp32s2cdc
lib_deps = h2zero/NimBLE-Arduino@^1.4.0

[env:tasmota32s2cdc]
extends = env:tasmota32s2
board = esp32s2cdc
lib_deps = h2zero/NimBLE-Arduino@^1.4.0

[env:tasmota32s3-safeboot]
extends = env:tasmota32_base
board = esp32s3
build_flags = ${env:tasmota32_base.build_flags} -DFIRMWARE_SAFEBOOT
lib_extra_dirs = lib/lib_ssl, lib/libesp32
lib_ignore = 
	Micro-RTSP
	ESP Mail Client
	DHT sensor library
lib_deps = h2zero/NimBLE-Arduino@^1.4.0

[env:tasmota32s3]
extends = env:tasmota32_base
board = esp32s3
build_flags = ${env:tasmota32_base.build_flags} -DFIRMWARE_TASMOTA32
lib_ignore = 
	TTGO TWatch Library
	Micro-RTSP
	epdiy
lib_deps = h2zero/NimBLE-Arduino@^1.4.0

[env:tasmota32s3cdc-safeboot]
extends = env:tasmota32s3-safeboot
board = esp32s3cdc
lib_deps = h2zero/NimBLE-Arduino@^1.4.0

[env:tasmota32s3cdc]
extends = env:tasmota32s3
board = esp32s3cdc
lib_deps = h2zero/NimBLE-Arduino@^1.4.0

[env:tasmota32-AD]
extends = env:tasmota32_base
build_flags = ${env:tasmota32_base.build_flags} -DMY_LANGUAGE=ca_AD -DFIRMWARE_TASMOTA32
lib_deps = h2zero/NimBLE-Arduino@^1.4.0

[env:tasmota32-AF]
extends = env:tasmota32_base
build_flags = ${env:tasmota32_base.build_flags} -DMY_LANGUAGE=af_AF -DFIRMWARE_TASMOTA32
lib_deps = h2zero/NimBLE-Arduino@^1.4.0

[env:tasmota32-BG]
extends = env:tasmota32_base
build_flags = ${env:tasmota32_base.build_flags} -DMY_LANGUAGE=bg_BG -DFIRMWARE_TASMOTA32
lib_deps = h2zero/NimBLE-Arduino@^1.4.0

[env:tasmota32-BR]
extends = env:tasmota32_base
build_flags = ${env:tasmota32_base.build_flags} -DMY_LANGUAGE=pt_BR -DFIRMWARE_TASMOTA32
lib_deps = h2zero/NimBLE-Arduino@^1.4.0

[env:tasmota32-CN]
extends = env:tasmota32_base
build_flags = ${env:tasmota32_base.build_flags} -DMY_LANGUAGE=zh_CN -DFIRMWARE_TASMOTA32
lib_deps = h2zero/NimBLE-Arduino@^1.4.0

[env:tasmota32-CZ]
extends = env:tasmota32_base
build_flags = ${env:tasmota32_base.build_flags} -DMY_LANGUAGE=cs_CZ -DFIRMWARE_TASMOTA32
lib_deps = h2zero/NimBLE-Arduino@^1.4.0

[env:tasmota32-DE]
extends = env:tasmota32_base
build_flags = ${env:tasmota32_base.build_flags} -DMY_LANGUAGE=de_DE -DFIRMWARE_TASMOTA32
lib_deps = h2zero/NimBLE-Arduino@^1.4.0

[env:tasmota32-ES]
extends = env:tasmota32_base
build_flags = ${env:tasmota32_base.build_flags} -DMY_LANGUAGE=es_ES -DFIRMWARE_TASMOTA32
lib_deps = h2zero/NimBLE-Arduino@^1.4.0

[env:tasmota32-FR]
extends = env:tasmota32_base
build_flags = ${env:tasmota32_base.build_flags} -DMY_LANGUAGE=fr_FR -DFIRMWARE_TASMOTA32
lib_deps = h2zero/NimBLE-Arduino@^1.4.0

[env:tasmota32-FY]
extends = env:tasmota32_base
build_flags = ${env:tasmota32_base.build_flags} -DMY_LANGUAGE=fy_NL -DFIRMWARE_TASMOTA32
lib_deps = h2zero/NimBLE-Arduino@^1.4.0

[env:tasmota32-GR]
extends = env:tasmota32_base
build_flags = ${env:tasmota32_base.build_flags} -DMY_LANGUAGE=el_GR -DFIRMWARE_TASMOTA32
lib_deps = h2zero/NimBLE-Arduino@^1.4.0

[env:tasmota32-HE]
extends = env:tasmota32_base
build_flags = ${env:tasmota32_base.build_flags} -DMY_LANGUAGE=he_HE -DFIRMWARE_TASMOTA32
lib_deps = h2zero/NimBLE-Arduino@^1.4.0

[env:tasmota32-HU]
extends = env:tasmota32_base
build_flags = ${env:tasmota32_base.build_flags} -DMY_LANGUAGE=hu_HU -DFIRMWARE_TASMOTA32
lib_deps = h2zero/NimBLE-Arduino@^1.4.0

[env:tasmota32-IT]
extends = env:tasmota32_base
build_flags = ${env:tasmota32_base.build_flags} -DMY_LANGUAGE=it_IT -DFIRMWARE_TASMOTA32
lib_deps = h2zero/NimBLE-Arduino@^1.4.0

[env:tasmota32-KO]
extends = env:tasmota32_base
build_flags = ${env:tasmota32_base.build_flags} -DMY_LANGUAGE=ko_KO -DFIRMWARE_TASMOTA32
lib_deps = h2zero/NimBLE-Arduino@^1.4.0

[env:tasmota32-NL]
extends = env:tasmota32_base
build_flags = ${env:tasmota32_base.build_flags} -DMY_LANGUAGE=nl_NL -DFIRMWARE_TASMOTA32
lib_deps = h2zero/NimBLE-Arduino@^1.4.0

[env:tasmota32-PL]
extends = env:tasmota32_base
build_flags = ${env:tasmota32_base.build_flags} -DMY_LANGUAGE=pl_PL -DFIRMWARE_TASMOTA32
lib_deps = h2zero/NimBLE-Arduino@^1.4.0

[env:tasmota32-PT]
extends = env:tasmota32_base
build_flags = ${env:tasmota32_base.build_flags} -DMY_LANGUAGE=pt_PT -DFIRMWARE_TASMOTA32
lib_deps = h2zero/NimBLE-Arduino@^1.4.0

[env:tasmota32-RO]
extends = env:tasmota32_base
build_flags = ${env:tasmota32_base.build_flags} -DMY_LANGUAGE=ro_RO -DFIRMWARE_TASMOTA32
lib_deps = h2zero/NimBLE-Arduino@^1.4.0

[env:tasmota32-RU]
extends = env:tasmota32_base
build_flags = ${env:tasmota32_base.build_flags} -DMY_LANGUAGE=ru_RU -DFIRMWARE_TASMOTA32
lib_deps = h2zero/NimBLE-Arduino@^1.4.0

[env:tasmota32-SE]
extends = env:tasmota32_base
build_flags = ${env:tasmota32_base.build_flags} -DMY_LANGUAGE=sv_SE -DFIRMWARE_TASMOTA32
lib_deps = h2zero/NimBLE-Arduino@^1.4.0

[env:tasmota32-SK]
extends = env:tasmota32_base
build_flags = ${env:tasmota32_base.build_flags} -DMY_LANGUAGE=sk_SK -DFIRMWARE_TASMOTA32
lib_deps = h2zero/NimBLE-Arduino@^1.4.0

[env:tasmota32-TR]
extends = env:tasmota32_base
build_flags = ${env:tasmota32_base.build_flags} -DMY_LANGUAGE=tr_TR -DFIRMWARE_TASMOTA32
lib_deps = h2zero/NimBLE-Arduino@^1.4.0

[env:tasmota32-TW]
extends = env:tasmota32_base
build_flags = ${env:tasmota32_base.build_flags} -DMY_LANGUAGE=zh_TW -DFIRMWARE_TASMOTA32
lib_deps = h2zero/NimBLE-Arduino@^1.4.0

[env:tasmota32-UK]
extends = env:tasmota32_base
build_flags = ${env:tasmota32_base.build_flags} -DMY_LANGUAGE=uk_UA -DFIRMWARE_TASMOTA32
lib_deps = h2zero/NimBLE-Arduino@^1.4.0

[env:tasmota32-VN]
extends = env:tasmota32_base
build_flags = ${env:tasmota32_base.build_flags} -DMY_LANGUAGE=vi_VN -DFIRMWARE_TASMOTA32
lib_deps = h2zero/NimBLE-Arduino@^1.4.0

[library]
shared_libdeps_dir = lib
lib_extra_dirs = 
	lib/lib_basic
	lib/lib_i2c
	lib/lib_display
	lib/lib_ssl
	lib/lib_audio
	lib/lib_rf
	lib/lib_div

[env:tasmota-rangeextender]
build_flags = ${env.build_flags}
	-D FIRMWARE_RANGE_EXTENDER
	-D PIO_FRAMEWORK_ARDUINO_LWIP2_HIGHER_BANDWIDTH
	-D USE_WIFI_RANGE_EXTENDER
	-D USE_WIFI_RANGE_EXTENDER_NAPT
lib_deps = h2zero/NimBLE-Arduino@^1.4.0

[env:tasmota32-rangeextender]
extends = env:tasmota32_base
build_flags = ${env:tasmota32_base.build_flags}
	-D FIRMWARE_TASMOTA32
	-D USE_WIFI_RANGE_EXTENDER
	-D USE_WIFI_RANGE_EXTENDER_NAPT
lib_deps = h2zero/NimBLE-Arduino@^1.4.0

[env:tasmota32s3-file]
extends = env:tasmota32_base
board = esp32s3
build_flags = ${env:tasmota32_base.build_flags} -D FIRMWARE_TASMOTA32
lib_deps = h2zero/NimBLE-Arduino@^1.4.0

[env:tasmota32c3-bluetooth]
extends = env:tasmota32c3
build_flags = ${env:tasmota32c3.build_flags}
	-D USE_BLE_ESP32
	-D USE_MI_ESP32
lib_extra_dirs = lib/libesp32, lib/libesp32_div, lib/lib_basic, lib/lib_i2c, lib/lib_rf, lib/lib_div, lib/lib_ssl, lib/lib_display, lib/lib_audio
lib_deps = h2zero/NimBLE-Arduino@^1.4.0

[env:tasmota32s3-bluetooth]
extends = env:tasmota32_base
board = esp32s3
build_flags = ${env:tasmota32_base.build_flags} -D FIRMWARE_BLUETOOTH
lib_extra_dirs = lib/libesp32, lib/libesp32_div, lib/lib_basic, lib/lib_ssl, lib/lib_i2c
lib_ignore = TTGO TWatch Library
	Micro-RTSP
	epdiy
lib_deps = h2zero/NimBLE-Arduino@^1.4.0

[env:tasmota32-mi32-homebridge]
extends = env:tasmota32_base
build_flags = ${env:tasmota32_base.build_flags}
	-DFIRMWARE_BLUETOOTH
	-DUSE_MI_EXT_GUI
	-DUSE_MI_HOMEKIT=1
lib_extra_dirs = lib/libesp32, lib/libesp32_div, lib/lib_basic, lib/lib_i2c, lib/lib_div, lib/lib_ssl
lib_ignore = ESP8266Audio
	ESP8266SAM
	TTGO TWatch Library
	Micro-RTSP
	epdiy
	esp32-camera
lib_deps = h2zero/NimBLE-Arduino@^1.4.0

[env:tasmota32c3-mi32-homebridge]
extends = env:tasmota32c3
build_flags = ${env:tasmota32_base.build_flags}
	-DFIRMWARE_BLUETOOTH
	-DUSE_MI_EXT_GUI
	-DUSE_MI_HOMEKIT=1
lib_extra_dirs = lib/libesp32, lib/libesp32_div, lib/lib_basic, lib/lib_i2c, lib/lib_div, lib/lib_ssl
lib_ignore = ESP8266Audio
	ESP8266SAM
	TTGO TWatch Library
	Micro-RTSP
	epdiy
	esp32-camera
lib_deps = h2zero/NimBLE-Arduino@^1.4.0

[env:tasmota32s3-mi32-homebridge]
extends = env:tasmota32s3
build_flags = ${env:tasmota32_base.build_flags}
	-DFIRMWARE_BLUETOOTH
	-DUSE_MI_EXT_GUI
	-DUSE_MI_HOMEKIT=1
lib_extra_dirs = lib/libesp32, lib/libesp32_div, lib/lib_basic, lib/lib_i2c, lib/lib_div, lib/lib_ssl
lib_ignore = ESP8266Audio
	ESP8266SAM
	TTGO TWatch Library
	Micro-RTSP
	epdiy
	esp32-camera
lib_deps = h2zero/NimBLE-Arduino@^1.4.0

[env:tasmota-debug]
build_type = debug
build_unflags = ${env.build_unflags}
build_flags = ${env.build_flags}
lib_deps = h2zero/NimBLE-Arduino@^1.4.0

[env:tasmota32-debug]
extends = env:tasmota32_base
build_type = debug
build_unflags = ${env:tasmota32_base.build_unflags}
build_flags = ${env:tasmota32_base.build_flags}
monitor_filters = esp32_exception_decoder
lib_deps = h2zero/NimBLE-Arduino@^1.4.0

[env:tasmota32-ocd]
build_type = debug
extends = env:tasmota32_base
debug_tool = esp-prog
upload_protocol = esp-prog
debug_init_break = tbreak setup
build_unflags = ${env:tasmota32_base.build_unflags}
build_flags = ${env:tasmota32_base.build_flags}
monitor_filters = esp32_exception_decoder
lib_deps = h2zero/NimBLE-Arduino@^1.4.0

[env:tasmota32solo1-ocd]
build_type = debug
extends = env:tasmota32solo1
platform = ${core32solo1.platform}
platform_packages = ${core32solo1.platform_packages}
board = esp32_solo1_4M
debug_tool = esp-prog
upload_protocol = esp-prog
debug_init_break = tbreak setup
build_unflags = ${core32solo1.build_unflags}
build_flags = ${core32solo1.build_flags}
monitor_filters = esp32_exception_decoder
lib_deps = h2zero/NimBLE-Arduino@^1.4.0
